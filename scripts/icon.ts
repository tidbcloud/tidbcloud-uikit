import fs from 'node:fs'
import path from 'node:path'

import { transform } from '@svgr/core'
import { camelCase, upperFirst } from 'lodash-es'
import { markdownTable } from 'markdown-table'

const rawIconInputPath = path.resolve(process.cwd(), './packages/icons/raw')
const reactIconOutput = path.resolve(process.cwd(), './packages/icons/react')
const entryOutput = path.join('./packages/icons/entry.ts')

const getAllIcons = () =>
  fs
    .readdirSync(rawIconInputPath)
    .filter((i) => path.extname(i) === '.svg')
    .sort()

const pascalCase = (filename: string) => upperFirst(camelCase(path.basename(filename, '.svg')))

const getPreviewContent = (content: string) => `> **DO NOT EDIT THIS FILE, THE CONTENT IS AUTO-GENERATED.**

## Add new SVG Icon

1. put new svg files into \`src/uikit/icons/raw\`
2. run npm script \`yarn gen:icon\`

## Usage

\`\`\`ts
import { Icon } from '@tidb-cloud-uikit/icons'

// with ts typing support!
<Icon name="SomeName" />
<Icon name="SomeName" size={20} color="red" />
\`\`\`

## Preview

${content}
`

function prepare() {
  const icons = getAllIcons()
  icons.forEach((i) => {
    const name = pascalCase(i)
    if (!i.startsWith(name)) {
      const iconPath = path.resolve(rawIconInputPath, i)
      const content = fs.readFileSync(iconPath, 'utf-8')
      fs.unlinkSync(iconPath)
      fs.writeFileSync(path.resolve(rawIconInputPath, `${name}.svg`), content)
    }
  })
}

function transformSvgIcon() {
  const icons = getAllIcons()
  icons.forEach((i) => {
    const iconPath = path.resolve(rawIconInputPath, i)
    const content = fs.readFileSync(iconPath, 'utf-8')
    const name = pascalCase(i)
    const jsCode = transform.sync(
      content,
      { plugins: ['@svgr/plugin-svgo', '@svgr/plugin-jsx', '@svgr/plugin-prettier'], icon: true },
      { componentName: name }
    )
    console.log('jsCode: ', jsCode)
    fs.writeFileSync(path.resolve(reactIconOutput, `${name}.jsx`), jsCode)
  })
}

function generatePreview() {
  const icons = getAllIcons()
  const tableHeader = ['Preview', 'Name', 'Usage']
  const tableBody = icons.map((i) => {
    const iconName = path.basename(i, '.svg')
    const iconPath = path.relative(process.cwd(), path.join(rawIconInputPath, i))
    return [`![${iconName}](./${iconPath})`, iconName, `\`<Icon name="${iconName}" />\``]
  })
  const tableContent = markdownTable([tableHeader, ...tableBody], { align: ['c', 'l', 'l'] })
  fs.writeFileSync('ICONS_PREVIEW.md', getPreviewContent(tableContent))
}

const noEdit = `/**
 * DO NOT EDIT THIS FILE, THE CONTENT IS AUTO-GENERATED
 * RUN \`yarn gen:icon\` TO RE-GENERATE
 */`

function updateImportEntry() {
  const icons = getAllIcons()
  const imports = icons
    .map((i) => {
      const name = pascalCase(i)
      return `import ${name} from './react/${name}'`
    })
    .join('\n')
  const exportMap = `export const ICON_MAP = {\n${icons.map((i) => pascalCase(i))}\n}`
  const reexports = `export {\n${icons.map((i) => pascalCase(i)).join(',\n')}\n}`

  fs.writeFileSync(entryOutput, [noEdit, imports, '\n', exportMap, '\n', reexports].join('\n') + '\n')
}

prepare()
transformSvgIcon()
generatePreview()
updateImportEntry()
