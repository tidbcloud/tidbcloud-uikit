/**
 * This script will scan all the svg icon in src/icons/raw folder
 * then generate correspondent react jsx code to src/icons/react folder
 *
 * It will:
 * - Rename all the svg file to PasCal case (or upper camel case)
 * - Use svgr to generate react jsx code
 * - Use a custom code template to support other props such as `size`
 * - By default, it will skip if there are already a jsx file with same name, unless you pass a `--force` flag
 *
 * Usage:
 * ```sh
 * npx tsx script/icon.ts
 * npx tsx script/icon.ts --force
 * ```
 */
import fs from 'node:fs'
import path from 'node:path'
import { argv } from 'node:process'

import { transform, Config } from '@svgr/core'
import { camelCase, upperFirst } from 'lodash-es'

const withForceFlag = argv.includes('--force')
const rawIconInputPath = path.resolve(process.cwd(), './src/icons/raw')
const reactIconOutput = path.resolve(process.cwd(), './src/icons/react')
const indexOutput = path.join('./src/icons/index.ts')

const getAllIcons = () =>
  fs
    .readdirSync(rawIconInputPath)
    .filter((i) => path.extname(i) === '.svg')
    .sort()

const pascalCase = (filename: string) => upperFirst(camelCase(path.basename(filename, '.svg')))

function prepare() {
  const icons = getAllIcons()
  icons.forEach((i) => {
    const name = pascalCase(i)
    if (!i.startsWith(name)) {
      const iconPath = path.resolve(rawIconInputPath, i)
      const content = fs.readFileSync(iconPath, 'utf-8')
      fs.unlinkSync(iconPath)
      fs.writeFileSync(path.resolve(rawIconInputPath, `${name}.svg`), content)
    }
  })
}

const template: Config['template'] = (variables, { tpl }) => {
  return tpl`
${variables.imports};

${variables.interfaces};

const ${variables.componentName} = (${variables.props}) => {
  if (typeof props.size === 'number') {
    const { size, ...rest } = props;
    props = { ...rest, height: size, width: size };
  }
  return (
    ${variables.jsx}
  )
};

${variables.exports};
`
}

function transformSvgIcon() {
  const icons = getAllIcons()
  icons.forEach((i) => {
    const iconPath = path.resolve(rawIconInputPath, i)
    const content = fs.readFileSync(iconPath, 'utf-8')
    const name = pascalCase(i)
    const jsCode = transform.sync(
      content,
      {
        plugins: ['@svgr/plugin-svgo', '@svgr/plugin-jsx', '@svgr/plugin-prettier'],
        icon: true,
        ref: true,
        replaceAttrValues: {
          '#000': 'currentColor',
          black: 'currentColor'
        },
        jsx: {
          babelConfig: {
            plugins: [
              [
                '@svgr/babel-plugin-remove-jsx-attribute',
                {
                  elements: ['path'],
                  attributes: ['strokeWidth']
                },
                'remove strokeWidth on path tag'
              ],
              [
                '@svgr/babel-plugin-add-jsx-attribute',
                {
                  elements: ['svg'],
                  attributes: [{ name: 'strokeWidth', value: '1.5' }]
                },
                'add strokeWidth on svg tag'
              ],
              [
                '@svgr/babel-plugin-add-jsx-attribute',
                {
                  elements: ['path'],
                  attributes: [{ name: 'strokeWidth', value: 'inherit' }]
                },
                'add strokeWidth inherit on path tag'
              ]
            ]
          }
        },
        template
      },
      { componentName: name }
    )
    const output = path.resolve(reactIconOutput, `${name}.jsx`)
    if (!fs.existsSync(output) || withForceFlag) {
      fs.writeFileSync(output, jsCode)
    }
  })
}

const noEdit = `/**
 * DO NOT EDIT THIS FILE, THE CONTENT IS AUTO-GENERATED
 * RUN \`pnpm run build:icon\` TO RE-GENERATE
 */`

function updateImportEntry() {
  const icons = getAllIcons()
  const reexports = icons
    .map((i) => {
      const name = pascalCase(i)
      return `export { default as ${pascalCase('Icon' + name)} } from './react/${name}.jsx'`
    })
    .join('\n')

  fs.writeFileSync(indexOutput, [noEdit, reexports].join('\n') + '\n')
}

;(function () {
  prepare()
  transformSvgIcon()
  updateImportEntry()
})()
