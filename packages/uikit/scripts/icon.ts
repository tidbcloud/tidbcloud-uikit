import fs from 'node:fs'
import path from 'node:path'

import { transform, Config } from '@svgr/core'
import { camelCase, upperFirst } from 'lodash-es'

const rawIconInputPath = path.resolve(process.cwd(), './src/icons/raw')
const reactIconOutput = path.resolve(process.cwd(), './src/icons/react')
const indexOutput = path.join('./src/icons/index.ts')
const mapOutput = path.join('./src/icons/map.ts')

const getAllIcons = () =>
  fs
    .readdirSync(rawIconInputPath)
    .filter((i) => path.extname(i) === '.svg')
    .sort()

const pascalCase = (filename: string) => upperFirst(camelCase(path.basename(filename, '.svg')))

function prepare() {
  const icons = getAllIcons()
  icons.forEach((i) => {
    const name = pascalCase(i)
    if (!i.startsWith(name)) {
      const iconPath = path.resolve(rawIconInputPath, i)
      const content = fs.readFileSync(iconPath, 'utf-8')
      fs.unlinkSync(iconPath)
      fs.writeFileSync(path.resolve(rawIconInputPath, `${name}.svg`), content)
    }
  })
}

const template: Config['template'] = (variables, { tpl }) => {
  return tpl`
${variables.imports};

${variables.interfaces};

const ${variables.componentName} = (${variables.props}) => {
  if (typeof props.size === 'number') {
    props = { ...props, height: props.size, width: props.width };
  }
  return (
    ${variables.jsx}
  )
};

${variables.exports};
`
}

function transformSvgIcon() {
  const icons = getAllIcons()
  icons.forEach((i) => {
    const iconPath = path.resolve(rawIconInputPath, i)
    const content = fs.readFileSync(iconPath, 'utf-8')
    const name = pascalCase(i)
    const jsCode = transform.sync(
      content,
      {
        plugins: ['@svgr/plugin-svgo', '@svgr/plugin-jsx', '@svgr/plugin-prettier'],
        icon: true,
        ref: true,
        template
      },
      { componentName: name }
    )
    fs.writeFileSync(path.resolve(reactIconOutput, `${name}.jsx`), jsCode)
  })
}

const noEdit = `/**
 * DO NOT EDIT THIS FILE, THE CONTENT IS AUTO-GENERATED
 * RUN \`pnpm run build:icon\` TO RE-GENERATE
 */`

function updateImportEntry() {
  const icons = getAllIcons()
  const imports = icons
    .map((i) => {
      const name = pascalCase(i)
      return `import ${name} from './react/${name}'`
    })
    .join('\n')
  const reexports = icons
    .map((i) => {
      const name = pascalCase(i)
      return `export { default as ${pascalCase('Icon' + name)} } from './react/${name}'`
    })
    .join('\n')

  const exportMap = `export const ICON_MAP = {\n${icons.map((i) => pascalCase(i))}\n}`

  const iconReexport = `export { Icon } from './Icon'`

  fs.writeFileSync(indexOutput, [noEdit, reexports, '\n', iconReexport].join('\n') + '\n')
  fs.writeFileSync(mapOutput, [noEdit, imports, '\n', exportMap].join('\n') + '\n')
}

;(function () {
  prepare()
  transformSvgIcon()
  updateImportEntry()
})()
